{
  "swagger": "2.0",
  "info": {
    "title": "Task Manager API",
    "description": "API for managing tasks and users",
    "version": "1.0.0"
  },
  "host": "cse341-week03-04.onrender.com",
  "basePath": "/",
  "tags": [
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Tasks",
      "description": "Task management endpoints"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "description": "Google OAuth2 authentication",
      "flow": "implicit",
      "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
      "scopes": {
        "openid": "Authenticate with Google",
        "email": "Access user's email",
        "profile": "Access user's profile"
      }
    },
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT token in the format: Bearer <token>"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/tasks/": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a new Task",
        "description": "Creates a new task detail. Requires Google OAuth2 authentication.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Task details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/taskInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Validation Error"
          },
          "401": {
            "description": "Unauthorized: Invalid token or user not authenticated"
          },
          "500": {
            "description": "Failed to create task"
          }
        },
        "security": [
          {
            "OAuth2": [
              "openid",
              "email",
              "profile"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve all tasks",
        "description": "Fetches all stored tasks details from the database. Requires Google OAuth2 authentication.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "401": {
            "description": "Unauthorized: Invalid token or user not authenticated"
          },
          "404": {
            "description": "No task data found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "openid",
              "email",
              "profile"
            ]
          }
        ]
      }
    },
    "/api/tasks/{id}": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update task by Id",
        "description": "Updates an existing task. Requires Google OAuth2 authentication.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Task ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated task details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/taskInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "OAuth2": [
              "openid",
              "email",
              "profile"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete a Task",
        "description": "Deletes a task from the database based on the provided ID. Requires Google OAuth2 authentication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the task to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "task deleted successfully"
          },
          "401": {
            "description": "Unauthorized: Invalid token or user not authenticated"
          },
          "404": {
            "description": "task not found"
          },
          "500": {
            "description": "Failed to delete task"
          }
        },
        "security": [
          {
            "OAuth2": [
              "openid",
              "email",
              "profile"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve a task by ID",
        "description": "Fetches task details based on a provided ID. Requires Google OAuth2 authentication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the task to retrieve"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Task details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "401": {
            "description": "Unauthorized: Invalid token or user not authenticated"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Failed to fetch task details"
          }
        },
        "security": [
          {
            "OAuth2": [
              "openid",
              "email",
              "profile"
            ]
          }
        ]
      }
    },
    "/api/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "description": "Creates new User",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Validation Error"
          },
          "500": {
            "description": "Failed to create task"
          }
        }
      }
    },
    "/api/users/update/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user by Id",
        "description": "Updates an existing User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated User details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve all User",
        "description": "Fetches all stored User details from the database.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of User retrieved successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "No user data found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a User by ID",
        "description": "Fetches User details based on a provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the User to retrieve"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Failed to fetch user details"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a Users",
        "description": "Deletes a Users from the database based on the provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Users to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Users deleted successfully"
          },
          "404": {
            "description": "Users not found"
          },
          "500": {
            "description": "Failed to delete Users"
          }
        }
      }
    },
    "/api/auth/google": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/auth/google/callback": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "12345673884495"
        },
        "name": {
          "type": "string",
          "example": "John"
        },
        "email": {
          "type": "string",
          "example": "johndoe@example.com"
        },
        "role": {
          "type": "string",
          "example": "user"
        },
        "createdAt": {
          "type": "string",
          "example": "2025-03-17T10:05:00Z"
        },
        "updatedAt": {
          "type": "string",
          "example": "2025-03-18T15:02:59.926Z"
        },
        "__v": {
          "type": "number",
          "example": 0
        }
      }
    },
    "UserInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Jane Matther"
        },
        "email": {
          "type": "string",
          "example": "janesmith@example.com"
        },
        "role": {
          "type": "string",
          "example": "user"
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "123664849955"
        },
        "title": {
          "type": "string",
          "example": "new task"
        },
        "description": {
          "type": "string",
          "example": "how to make it"
        },
        "status": {
          "type": "string",
          "example": "in-progress"
        },
        "priority": {
          "type": "string",
          "example": "medium"
        },
        "dueDate": {
          "type": "string",
          "example": "2025-04-05"
        },
        "createdAt": {
          "type": "string",
          "example": "2025-03-17T10:05:00Z"
        },
        "updatedAt": {
          "type": "string",
          "example": "2025-03-18T13:32:46.952Z"
        },
        "__v": {
          "type": "number",
          "example": 0
        }
      }
    },
    "taskInput": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "new task"
        },
        "description": {
          "type": "string",
          "example": "how to make it"
        },
        "status": {
          "type": "string",
          "example": "pending"
        },
        "priority": {
          "type": "string",
          "example": "high"
        },
        "dueDate": {
          "type": "string",
          "example": "2025-04-21"
        }
      }
    }
  }
}